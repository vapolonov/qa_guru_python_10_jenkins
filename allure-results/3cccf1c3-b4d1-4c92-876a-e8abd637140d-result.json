{"name": "test_submit_automation_practice_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.all(('css selector', '[id^=google_ads][id$=container__],[id$=Advertisement]')).has size less than or equal 2\n\nReason: AssertionError: actual size: 4\nScreenshot: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074640810\\1659074640811.png\nPageSource: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074640810\\1659074640811.html", "trace": "self = <selene.core.wait.Wait object at 0x000001F6173935B0>\nfn = <selene.core.conditions.CollectionCondition object at 0x000001F617393340>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.CollectionCondition object at 0x000001F617393340>\nentity = <selene.core.entity.Collection object at 0x000001F617393070>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\condition.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Collection object at 0x000001F617393070>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__\n            if query_to_str.startswith('<function')\n            else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual size: 4\n\n..\\venv\\lib\\site-packages\\selene\\core\\condition.py:124: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_submit_automation_practice_form():\n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": \"100.0\",\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": False\n            }\n        }\n        options.capabilities.update(selenoid_capabilities)\n    \n        driver = webdriver.Remote(\n            command_executor=\"https://user1:1234@selenoid.autotests.cloud/wd/hub\",\n            options=options)\n    \n        browser.config.driver = driver\n    \n        with allure.step('Preconditions and open page for test'):\n>           arrange_student_registration_form_opened()\n\ntest_student_registration_form.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\utils.py:19: in arrange_student_registration_form_opened\n    .should(have.size_less_than_or_equal(2))\\\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:1351: in should\n    super().should(condition)\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:126: in should\n    self.wait.for_(condition)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Wait object at 0x000001F6173935B0>\nfn = <selene.core.conditions.CollectionCondition object at 0x000001F617393340>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 10s, while waiting for:\nE                       browser.all(('css selector', '[id^=google_ads][id$=container__],[id$=Advertisement]')).has size less than or equal 2\nE                       \nE                       Reason: AssertionError: actual size: 4\nE                       Screenshot: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074640810\\1659074640811.png\nE                       PageSource: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074640810\\1659074640811.html\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException"}, "steps": [{"name": "Preconditions and open page for test", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.all(('css selector', '[id^=google_ads][id$=container__],[id$=Advertisement]')).has size less than or equal 2\n\nReason: AssertionError: actual size: 4\nScreenshot: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074640810\\1659074640811.png\nPageSource: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074640810\\1659074640811.html\n\n", "trace": "  File \"F:\\QA-Engineer\\Python_projects\\qa_guru\\qa_guru_python_10_jenkins\\tests\\test_student_registration_form.py\", line 36, in test_submit_automation_practice_form\n    arrange_student_registration_form_opened()\n  File \"F:\\QA-Engineer\\Python_projects\\qa_guru\\qa_guru_python_10_jenkins\\utils\\utils.py\", line 19, in arrange_student_registration_form_opened\n    .should(have.size_less_than_or_equal(2))\\\n  File \"F:\\QA-Engineer\\Python_projects\\qa_guru\\qa_guru_python_10_jenkins\\venv\\lib\\site-packages\\selene\\core\\entity.py\", line 1351, in should\n    super().should(condition)\n  File \"F:\\QA-Engineer\\Python_projects\\qa_guru\\qa_guru_python_10_jenkins\\venv\\lib\\site-packages\\selene\\core\\entity.py\", line 126, in should\n    self.wait.for_(condition)\n  File \"F:\\QA-Engineer\\Python_projects\\qa_guru\\qa_guru_python_10_jenkins\\venv\\lib\\site-packages\\selene\\core\\wait.py\", line 125, in for_\n    raise self._hook_failure(failure)\n"}, "start": 1659074657671, "stop": 1659074672231}], "start": 1659074640852, "stop": 1659074672234, "uuid": "d14c0811-02e7-4223-9630-d35578d362ff", "historyId": "56b1f549a389432cb0da935f5e79ad7e", "testCaseId": "a4829e6f7962f5aef51fde6d93523ace", "fullName": "tests.test_student_registration_form#test_submit_automation_practice_form", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_student_registration_form"}, {"name": "host", "value": "PARKAN"}, {"name": "thread", "value": "2444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_student_registration_form"}]}