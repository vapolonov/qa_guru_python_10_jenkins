{"name": "test_submit_automation_practice_form", "status": "broken", "statusDetails": {"message": "TypeError: TimeoutException.__init__() takes from 1 to 2 positional arguments but 4 were given", "trace": "self = <selene.core.wait.Wait object at 0x00000200E7713670>\nfn = <selene.core.conditions.ElementCondition object at 0x00000200E7713F70>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.ElementCondition object at 0x00000200E7713F70>\nentity = <selene.core.entity.Element object at 0x00000200E77780A0>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\condition.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x00000200E77780A0>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__\n            if query_to_str.startswith('<function')\n            else query_to_str\n        )\n>       actual = query(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\condition.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Query object at 0x00000200E74D88B0>\nentity = <selene.core.entity.Element object at 0x00000200E77780A0>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x00000200E77780A0>\n\n>   text: Query[Element, str] = Query('text', lambda element: element().text)\n\n..\\venv\\lib\\site-packages\\selene\\core\\query.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x00000200E77780A0>\n\n    def __call__(self) -> WebElement:\n>       return self._locator()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x00000200E7778100>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def find() -> WebElement:\n>       webelements = self()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:972: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Collection object at 0x00000200E77781C0>\n\n    def __call__(self) -> List[WebElement]:\n>       return self._locator()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:947: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x00000200E7778220>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       Locator(f'{self}.all({by})', lambda: self().find_elements(*by)),\n        self.config,\n    )\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x00000200E77782E0>\n\n    def __call__(self) -> WebElement:\n>       return self._locator()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x00000200E7778340>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def find() -> WebElement:\n>       webelements = self()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:972: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Collection object at 0x00000200E7778CA0>\n\n    def __call__(self) -> List[WebElement]:\n>       return self._locator()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:947: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x00000200E7778F70>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       Locator(f'{self}.all({by})', lambda: self().find_elements(*by)),\n        self.config,\n    )\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x00000200E777BBB0>\n\n    def __call__(self) -> WebElement:\n>       return self._locator()\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x00000200E7779F30>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>           f'{self}.element({by})', lambda: self.driver.find_element(*by)\n        ),\n        self.config,\n    )\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:1540: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"250725af4e22437b0a9e86eccac37843\")>\nby = 'css selector', value = '.modal-content .table'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"250725af4e22437b0a9e86eccac37843\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '.modal-content .table'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200E777AFE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x564ebaee8b08 \\\\u003Cunknown>\\\\n#17 0x564ebaf025dd \\\\u003Cunknown>\\\\n#18 0x7f9691826609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".modal-content .table\"}\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x564ebae85013 <unknown>\nE       #1 0x564ebabe7a08 <unknown>\nE       #2 0x564ebac1dfb6 <unknown>\nE       #3 0x564ebac1e171 <unknown>\nE       #4 0x564ebac50dd4 <unknown>\nE       #5 0x564ebac3b95d <unknown>\nE       #6 0x564ebac4eb94 <unknown>\nE       #7 0x564ebac3b823 <unknown>\nE       #8 0x564ebac1108a <unknown>\nE       #9 0x564ebac121e5 <unknown>\nE       #10 0x564ebaeb2e5d <unknown>\nE       #11 0x564ebaecc061 <unknown>\nE       #12 0x564ebaeb4bb5 <unknown>\nE       #13 0x564ebaecce08 <unknown>\nE       #14 0x564ebaea82f0 <unknown>\nE       #15 0x564ebaee8988 <unknown>\nE       #16 0x564ebaee8b08 <unknown>\nE       #17 0x564ebaf025dd <unknown>\nE       #18 0x7f9691826609 <unknown>\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_submit_automation_practice_form():\n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": \"100.0\",\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": False\n            }\n        }\n        options.capabilities.update(selenoid_capabilities)\n    \n        driver = webdriver.Remote(\n            command_executor=\"https://user1:1234@selenoid.autotests.cloud/wd/hub\",\n            options=options)\n    \n        browser.config.driver = driver\n    \n        with allure.step('Preconditions and open page for test'):\n            arrange_student_registration_form_opened()\n    \n        with allure.step('Check page title'):\n            browser.should(have.title('ToolsQA'))\n    \n        with allure.step('Check page header'):\n            s('.main-header').should(have.exact_text('Practice Form'))\n    \n        with allure.step('Enter student name'):\n            s('#firstName').type(Student.first_name)\n        with allure.step('Enter student last name'):\n            s('#lastName').type(Student.last_name)\n        with allure.step('Enter student email'):\n            s('#userEmail').type(Student.email)\n        with allure.step('Enter student mobile number'):\n            mobile_number = s('#userNumber')\n            mobile_number.type(Student.mobile)\n    \n        with allure.step('Select student gender'):\n            gender_group = s('#genterWrapper')\n            gender_group.all('.custom-radio').element_by(have.exact_text(Student.gender)).click()\n    \n        with allure.step('Select student date of birth'):\n            date_of_birth = Datepicker(s('#dateOfBirthInput'))\n            date_of_birth.set_date_of_birth(year=Student.year_of_birth,\n                                            month=Student.month_of_birth,\n                                            day=Student.day_of_birth)\n        with allure.step('Set Subjects'):\n            subject = TagsInput(s('#subjectsInput'))\n            subject.add(Subjects.maths)\n            # subject.add(Subjects.maths).add(Subjects.english).add(Subjects.physics)\n            subject.autocomplete(from_='Eng', to_=Subjects.english)\n            subject.add_or_auto('Phys')\n    \n        with allure.step('Set hobbies'):\n            set_hobbies.set_hobby(Hobbies.sports)\n            set_hobbies.set_hobby(Hobbies.music)\n    \n        with allure.step('Load a file'):\n            s('#uploadPicture').send_keys(resource('picture.png'))\n    \n        with allure.step('Enter the address'):\n            s('#currentAddress').type(Student.address)\n    \n        with allure.step('Select state and city'):\n            set_state_city = Dropdown(s('#state'), s('#city'))\n            set_state_city.select(state_data=Student.state)\n            set_state_city.autocomplete(city_data=Student.city)\n    \n        with allure.step('Send the form'):\n            s('#submit').perform(command.js.click)\n    \n        with allure.step('Check student data'):\n            results = Table(s('.modal-content .table'))\n            results.cell(1, 1).should(have.text(f'{Student.first_name} {Student.last_name}'))\n            results.cell(2, 1).should(have.text(Student.email))\n            results.cell(3, 1).should(have.text(Student.gender))\n            results.cell(4, 1).should(have.text(Student.mobile))\n            results.cell(5, 1).should(have.text(Student.date_of_birth))\n            results.cell(6, 1).should(have.text(f'{Subjects.maths}, {Subjects.english}, {Subjects.physics}'))\n            results.cell(7, 1).should(have.text(f'{Hobbies.sports}, {Hobbies.music}'))\n            results.cell(8, 1).should(have.text('picture.png'))\n>           results.cell(9, 1).should(have.text(Student.address))\n\ntest_student_registration_form.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x00000200E77780A0>\ncondition = <selene.core.conditions.ElementCondition object at 0x00000200E7713F70>\ntimeout = None\n\n    def should(\n        self, condition: Condition[Element], timeout: int = None\n    ) -> Element:\n        if timeout:\n            warnings.warn(\n                \"using timeout argument is deprecated; \"\n                \"use `browser.element('#foo').with_(Config(timeout=6)).should(be.enabled)`\"\n                \"or just `...with_(timeout=6).should(...` style instead\",\n                DeprecationWarning,\n            )\n            return self.with_(Config(timeout=timeout)).should(condition)\n    \n>       super().should(condition)\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:539: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x00000200E77780A0>\ncondition = <selene.core.conditions.ElementCondition object at 0x00000200E7713F70>\n\n    def should(self, condition: Condition[E]) -> E:\n>       self.wait.for_(condition)\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Wait object at 0x00000200E7713670>\nfn = <selene.core.conditions.ElementCondition object at 0x00000200E7713F70>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 3s, while waiting for:\nE                       browser.element(('css selector', '.modal-content .table')).all(('css selector', 'tr'))[9].all(('css selector', 'td'))[1].has text Russia, Nizhny Novgorod\nE                       \nE                       Reason: NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".modal-content .table\"}\nE                         (Session info: chrome=100.0.4896.60)\nE                       Stacktrace:\nE                       #0 0x564ebae85013 <unknown>\nE                       #1 0x564ebabe7a08 <unknown>\nE                       #2 0x564ebac1dfb6 <unknown>\nE                       #3 0x564ebac1e171 <unknown>\nE                       #4 0x564ebac50dd4 <unknown>\nE                       #5 0x564ebac3b95d <unknown>\nE                       #6 0x564ebac4eb94 <unknown>\nE                       #7 0x564ebac3b823 <unknown>\nE                       #8 0x564ebac1108a <unknown>\nE                       #9 0x564ebac121e5 <unknown>\nE                       #10 0x564ebaeb2e5d <unknown>\nE                       #11 0x564ebaecc061 <unknown>\nE                       #12 0x564ebaeb4bb5 <unknown>\nE                       #13 0x564ebaecce08 <unknown>\nE                       #14 0x564ebaea82f0 <unknown>\nE                       #15 0x564ebaee8988 <unknown>\nE                       #16 0x564ebaee8b08 <unknown>\nE                       #17 0x564ebaf025dd <unknown>\nE                       #18 0x7f9691826609 <unknown>\nE                       \nE                       Screenshot: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074775077\\1659074775078.png\nE                       PageSource: file://C:\\Users\\vasvap\\.selene\\screenshots\\1659074775077\\1659074775078.html\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_submit_automation_practice_form():\n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": \"100.0\",\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": False\n            }\n        }\n        options.capabilities.update(selenoid_capabilities)\n    \n        driver = webdriver.Remote(\n            command_executor=\"https://user1:1234@selenoid.autotests.cloud/wd/hub\",\n            options=options)\n    \n        browser.config.driver = driver\n    \n        with allure.step('Preconditions and open page for test'):\n            arrange_student_registration_form_opened()\n    \n        with allure.step('Check page title'):\n            browser.should(have.title('ToolsQA'))\n    \n        with allure.step('Check page header'):\n            s('.main-header').should(have.exact_text('Practice Form'))\n    \n        with allure.step('Enter student name'):\n            s('#firstName').type(Student.first_name)\n        with allure.step('Enter student last name'):\n            s('#lastName').type(Student.last_name)\n        with allure.step('Enter student email'):\n            s('#userEmail').type(Student.email)\n        with allure.step('Enter student mobile number'):\n            mobile_number = s('#userNumber')\n            mobile_number.type(Student.mobile)\n    \n        with allure.step('Select student gender'):\n            gender_group = s('#genterWrapper')\n            gender_group.all('.custom-radio').element_by(have.exact_text(Student.gender)).click()\n    \n        with allure.step('Select student date of birth'):\n            date_of_birth = Datepicker(s('#dateOfBirthInput'))\n            date_of_birth.set_date_of_birth(year=Student.year_of_birth,\n                                            month=Student.month_of_birth,\n                                            day=Student.day_of_birth)\n        with allure.step('Set Subjects'):\n            subject = TagsInput(s('#subjectsInput'))\n            subject.add(Subjects.maths)\n            # subject.add(Subjects.maths).add(Subjects.english).add(Subjects.physics)\n            subject.autocomplete(from_='Eng', to_=Subjects.english)\n            subject.add_or_auto('Phys')\n    \n        with allure.step('Set hobbies'):\n            set_hobbies.set_hobby(Hobbies.sports)\n            set_hobbies.set_hobby(Hobbies.music)\n    \n        with allure.step('Load a file'):\n            s('#uploadPicture').send_keys(resource('picture.png'))\n    \n        with allure.step('Enter the address'):\n            s('#currentAddress').type(Student.address)\n    \n        with allure.step('Select state and city'):\n            set_state_city = Dropdown(s('#state'), s('#city'))\n            set_state_city.select(state_data=Student.state)\n            set_state_city.autocomplete(city_data=Student.city)\n    \n        with allure.step('Send the form'):\n            s('#submit').perform(command.js.click)\n    \n>       with allure.step('Check student data'):\nE       TypeError: TimeoutException.__init__() takes from 1 to 2 positional arguments but 4 were given\n\ntest_student_registration_form.py:88: TypeError"}, "steps": [{"name": "Preconditions and open page for test", "status": "passed", "start": 1659074779959, "stop": 1659074782160}, {"name": "Check page title", "status": "passed", "start": 1659074782160, "stop": 1659074782222}, {"name": "Check page header", "status": "passed", "start": 1659074782223, "stop": 1659074782415}, {"name": "Enter student name", "status": "passed", "start": 1659074782415, "stop": 1659074782629}, {"name": "Enter student last name", "status": "passed", "start": 1659074782630, "stop": 1659074782833}, {"name": "Enter student email", "status": "passed", "start": 1659074782833, "stop": 1659074783413}, {"name": "Enter student mobile number", "status": "passed", "start": 1659074783413, "stop": 1659074783617}, {"name": "Select student gender", "status": "passed", "start": 1659074783617, "stop": 1659074783961}, {"name": "Select student date of birth", "status": "passed", "start": 1659074783961, "stop": 1659074784970}, {"name": "Set Subjects", "status": "passed", "start": 1659074784970, "stop": 1659074786328}, {"name": "Set hobbies", "status": "passed", "start": 1659074786328, "stop": 1659074786962}, {"name": "Load a file", "status": "passed", "start": 1659074786962, "stop": 1659074787187}, {"name": "Enter the address", "status": "passed", "start": 1659074787187, "stop": 1659074787405}, {"name": "Select state and city", "status": "passed", "start": 1659074787405, "stop": 1659074788447}, {"name": "Send the form", "status": "passed", "start": 1659074788447, "stop": 1659074788616}, {"name": "Check student data", "start": 1659074788616}], "start": 1659074775146, "stop": 1659074830933, "uuid": "8fa1e1f2-e701-44af-ab59-b94edaa5651c", "historyId": "56b1f549a389432cb0da935f5e79ad7e", "testCaseId": "a4829e6f7962f5aef51fde6d93523ace", "fullName": "tests.test_student_registration_form#test_submit_automation_practice_form", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_student_registration_form"}, {"name": "host", "value": "PARKAN"}, {"name": "thread", "value": "7912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_student_registration_form"}]}